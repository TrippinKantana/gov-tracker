/**
 * Comprehensive Report Generator
 * Generates filtered reports across all asset categories
 */

const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const { ChartJSNodeCanvas } = require('chartjs-node-canvas');

class ReportGenerator {
  constructor({ pool }) {
    this.pool = pool; // Database connection
    this.logoPath = path.join(__dirname, '../../assets/logos');
    this.chartJSNodeCanvas = new ChartJSNodeCanvas({ width: 400, height: 200 });
  }

  /**
   * Generate comprehensive report based on filters
   */
  async generateReport(filters) {
    const {
      macId,
      facilityId,
      reportType,
      reportPeriod,
      customStartDate,
      customEndDate,
      reportMode,
      includeInactive,
      macName,
      facilityName,
      dateRange,
      generatedBy
    } = filters;

    console.log('Generating report:', { reportType, reportPeriod, macName, facilityName });

    // Create PDF document
    const doc = new PDFDocument({ size: 'A4', margin: 50 });
    
    // Add header
    this.addReportHeader(doc, {
      title: `${this.getReportTypeTitle(reportType)} Report`,
      subtitle: `${macName}${facilityName ? ` - ${facilityName}` : ''}`,
      period: dateRange.label,
      generatedBy,
      generatedAt: new Date().toLocaleString()
    });

    // Generate content based on report type
    switch (reportType) {
      case 'fleet':
        await this.generateFleetReport(doc, filters);
        break;
      case 'assets':
        await this.generateAssetsReport(doc, filters);
        break;
      case 'facilities':
        await this.generateFacilitiesReport(doc, filters);
        break;
      case 'stock':
        await this.generateStockReport(doc, filters);
        break;
      case 'all':
        await this.generateComprehensiveReport(doc, filters);
        break;
      default:
        throw new Error('Invalid report type');
    }

    // Finalize document
    doc.end();
    return doc;
  }

  /**
   * Add clean professional report header
   */
  addReportHeader(doc, info) {
    // Clean professional color scheme
    const colors = {
      primary: '#000000',      // Black for headers
      secondary: '#333333',    // Dark gray for subtext
      text: '#000000',         // Black for main text
      lightGray: '#666666',    // Light gray for secondary text
      border: '#CCCCCC'        // Light gray for borders
    };

    // Clean header section
    doc.fillColor(colors.primary)
       .fontSize(20)
       .font('Helvetica-Bold')
       .text('REPUBLIC OF LIBERIA', 50, 30, { align: 'center' })
       .fontSize(16)
       .text('GENERAL SERVICES AGENCY', 50, 55, { align: 'center' })
       .fontSize(12)
       .font('Helvetica')
       .text('Asset Tracking & Management System', 50, 80, { align: 'center' });

    // Add separator line
    doc.strokeColor(colors.border)
       .lineWidth(1)
       .moveTo(50, 95)
       .lineTo(545, 95)
       .stroke();

    // Report Title Section
    doc.fillColor(colors.primary)
       .fontSize(18)
       .font('Helvetica-Bold')
       .text(info.title, 50, 110, { align: 'center' })
       .fillColor(colors.secondary)
       .fontSize(14)
       .font('Helvetica')
       .text(info.subtitle, 50, 135, { align: 'center' });

    // Report Details Box - Clean and minimal
    const boxY = 160;
    const boxHeight = 60;
    
    // Draw details box with clean border
    doc.strokeColor(colors.border)
       .lineWidth(1)
       .rect(50, boxY, 495, boxHeight)
       .stroke();

    // Report details - clean layout
    doc.fillColor(colors.text)
       .fontSize(10)
       .font('Helvetica-Bold')
       .text('REPORT DETAILS', 60, boxY + 10)
       .font('Helvetica')
       .fontSize(9)
       .text(`Report Period: ${info.period}`, 60, boxY + 25)
       .text(`Generated By: ${info.generatedBy}`, 60, boxY + 40)
       .text(`Generated On: ${info.generatedAt}`, 300, boxY + 25)
       .text(`Report ID: RPT-${Date.now()}`, 300, boxY + 40);

    // Add separator line
    doc.strokeColor(colors.border)
       .lineWidth(1)
       .moveTo(50, boxY + boxHeight + 10)
       .lineTo(545, boxY + boxHeight + 10)
       .stroke();

    return boxY + boxHeight + 30; // Return Y position for content
  }

  /**
   * Generate Fleet Report with clean, professional layout
   */
  async generateFleetReport(doc, filters) {
    let currentY = 250;
    
    // Clean section header
    doc.fillColor('#000000')
       .fontSize(16)
       .font('Helvetica-Bold')
       .text('FLEET INVENTORY REPORT', 50, currentY);
    
    // Add underline
    doc.strokeColor('#000000')
       .lineWidth(1)
       .moveTo(50, currentY + 5)
       .lineTo(250, currentY + 5)
       .stroke();
    
    currentY += 30;

    // Get fleet data
    const fleetData = await this.fetchFleetData(filters);
    
    if (fleetData.length === 0) {
      doc.fillColor('#666666')
         .fontSize(12)
         .font('Helvetica')
         .text('No fleet data available for the selected criteria.', 50, currentY);
      return;
    }

    // Professional summary
    const activeCount = fleetData.filter(v => v.status === 'active' || v.status === 'Active').length;
    const totalMileage = fleetData.reduce((sum, v) => sum + (v.mileage || 0), 0);
    
    // Summary box
    doc.strokeColor('#CCCCCC')
       .lineWidth(1)
       .rect(50, currentY, 495, 40)
       .stroke();
    
    doc.fillColor('#000000')
       .fontSize(11)
       .font('Helvetica-Bold')
       .text('SUMMARY', 60, currentY + 8)
       .font('Helvetica')
       .fontSize(10)
       .text(`Total Vehicles: ${fleetData.length}`, 60, currentY + 22)
       .text(`Active Vehicles: ${activeCount}`, 200, currentY + 22)
       .text(`Total Mileage: ${totalMileage.toLocaleString()} km`, 350, currentY + 22);
    
    currentY += 60;

    // Professional table
    const headers = ['Plate #', 'Vehicle', 'Department', 'Status', 'Mileage', 'Operator'];
    const columnWidths = [80, 120, 100, 80, 80, 100];
    let startX = 50;

    // Table header with clean styling
    doc.fillColor('#F8F9FA')
       .rect(50, currentY, 495, 25)
       .fill();
    
    doc.strokeColor('#CCCCCC')
       .lineWidth(1)
       .rect(50, currentY, 495, 25)
       .stroke();

    doc.fillColor('#000000')
       .fontSize(10)
       .font('Helvetica-Bold');
    headers.forEach((header, index) => {
      doc.text(header, startX + 5, currentY + 8, { width: columnWidths[index] - 10, align: 'left' });
      startX += columnWidths[index];
    });

    currentY += 30;

    // Table rows with alternating colors
    fleetData.forEach((vehicle, index) => {
      // Alternate row background
      if (index % 2 === 0) {
        doc.fillColor('#FFFFFF')
           .rect(50, currentY, 495, 20)
           .fill();
      } else {
        doc.fillColor('#F8F9FA')
           .rect(50, currentY, 495, 20)
           .fill();
      }
      
      // Row border
      doc.strokeColor('#CCCCCC')
         .lineWidth(0.5)
         .rect(50, currentY, 495, 20)
         .stroke();

      startX = 50;
      const vehicleData = [
        vehicle.plateNumber || 'N/A',
        `${vehicle.year || 'N/A'} ${vehicle.make || 'N/A'} ${vehicle.model || 'N/A'}`,
        vehicle.department || 'N/A',
        vehicle.status || 'N/A',
        `${(vehicle.mileage || 0).toLocaleString()} km`,
        vehicle.currentOperator || 'Unassigned'
      ];

      doc.fillColor('#000000')
         .fontSize(9)
         .font('Helvetica');
      
      vehicleData.forEach((data, dataIndex) => {
        doc.text(data, startX + 5, currentY + 6, { width: columnWidths[dataIndex] - 10, align: 'left' });
        startX += columnWidths[dataIndex];
      });

      currentY += 20;
      
      // Check for page break
      if (currentY > 700) {
        doc.addPage();
        currentY = 50;
      }
    });
  }

  /**
   * Generate Assets Report with clean professional styling
   */
  async generateAssetsReport(doc, filters) {
    let currentY = 250;
    
    // Clean section header
    doc.fillColor('#000000')
       .fontSize(16)
       .font('Helvetica-Bold')
       .text('ASSETS INVENTORY REPORT', 50, currentY);
    
    // Add underline
    doc.strokeColor('#000000')
       .lineWidth(1)
       .moveTo(50, currentY + 5)
       .lineTo(250, currentY + 5)
       .stroke();
    
    currentY += 30;

    // Get real assets data from API
    const assetsData = await this.fetchAssetsData(filters);
    
    if (assetsData.length === 0) {
      doc.fillColor('#666666')
         .fontSize(12)
         .font('Helvetica')
         .text('No assets data available for the selected criteria.', 50, currentY);
      return;
    }

    // Clean equipment summary
    const equipmentCount = assetsData.filter(a => a.category !== 'furniture').length;
    const furnitureCount = assetsData.filter(a => a.category === 'furniture').length;
    const totalValue = assetsData.reduce((sum, a) => sum + (a.purchasePrice || 0), 0);
    
    // Summary box with clean styling
    doc.strokeColor('#CCCCCC')
       .lineWidth(1)
       .rect(50, currentY, 495, 50)
       .stroke();
    
    doc.fillColor('#000000')
       .fontSize(11)
       .font('Helvetica-Bold')
       .text('ASSETS SUMMARY', 60, currentY + 8)
       .font('Helvetica')
       .fontSize(10)
       .text(`Equipment Items: ${equipmentCount}`, 60, currentY + 22)
       .text(`Furniture Items: ${furnitureCount}`, 200, currentY + 22)
       .text(`Total Assets: ${assetsData.length}`, 340, currentY + 22)
       .text(`Total Value: $${totalValue.toLocaleString()}`, 480, currentY + 22)
       .text(`Average Value: $${Math.round(totalValue / assetsData.length)}`, 60, currentY + 35)
       .text(`Active Assets: ${assetsData.filter(a => a.status === 'active' || a.status === 'Active').length}`, 200, currentY + 35);

    currentY += 70;

    // Assets by category with clean display
    const categories = [...new Set(assetsData.map(a => a.category || 'equipment'))];
    
    doc.fillColor('#000000')
       .fontSize(14)
       .font('Helvetica-Bold')
       .text('ASSETS BY CATEGORY', 50, currentY);
    
    currentY += 25;

    categories.forEach((category, index) => {
      const categoryItems = assetsData.filter(a => (a.category || 'equipment') === category);
      const categoryValue = categoryItems.reduce((sum, item) => sum + (item.purchasePrice || 0), 0);
      
      // Category box with clean styling
      const boxY = currentY;
      doc.fillColor(index % 2 === 0 ? '#F8F9FA' : '#FFFFFF')
         .rect(50, boxY, 495, 25)
         .fill();
      
      doc.strokeColor('#CCCCCC')
         .lineWidth(0.5)
         .rect(50, boxY, 495, 25)
         .stroke();
      
      doc.fillColor('#000000')
         .fontSize(10)
         .font('Helvetica-Bold')
         .text(category.toUpperCase().replace('_', ' '), 60, boxY + 8)
         .font('Helvetica')
         .fontSize(9)
         .text(`${categoryItems.length} items`, 200, boxY + 8)
         .text(`Value: $${categoryValue.toLocaleString()}`, 300, boxY + 8)
         .text(`Avg: $${Math.round(categoryValue / categoryItems.length)}`, 450, boxY + 8);
      
      currentY += 30;
    });

    // Add detailed table for top assets
    currentY += 20;
    doc.fillColor('#000000')
       .fontSize(14)
       .font('Helvetica-Bold')
       .text('TOP VALUABLE ASSETS', 50, currentY);
    
    currentY += 25;

    // Sort by value and take top 10
    const topAssets = assetsData
      .sort((a, b) => (b.purchasePrice || 0) - (a.purchasePrice || 0))
      .slice(0, 10);

    // Table headers with clean styling
    const headers = ['Asset Name', 'Category', 'Department', 'Value', 'Status'];
    const columnWidths = [180, 100, 120, 80, 80];
    let startX = 50;

    // Header background
    doc.fillColor('#F8F9FA')
       .rect(50, currentY - 5, 495, 25)
       .fill();
    
    doc.strokeColor('#CCCCCC')
       .lineWidth(1)
       .rect(50, currentY - 5, 495, 25)
       .stroke();

    // Draw headers
    doc.fillColor('#000000')
       .fontSize(10)
       .font('Helvetica-Bold');
    headers.forEach((header, index) => {
      doc.text(header, startX + 5, currentY, { width: columnWidths[index] - 10, align: 'left' });
      startX += columnWidths[index];
    });

    currentY += 25;

    // Draw asset data with clean styling
    topAssets.forEach((asset, index) => {
      // Alternate row background
      if (index % 2 === 0) {
        doc.fillColor('#FFFFFF')
           .rect(50, currentY - 5, 495, 20)
           .fill();
      } else {
        doc.fillColor('#F8F9FA')
           .rect(50, currentY - 5, 495, 20)
           .fill();
      }
      
      // Row border
      doc.strokeColor('#CCCCCC')
         .lineWidth(0.5)
         .rect(50, currentY - 5, 495, 20)
         .stroke();

      startX = 50;
      const assetData = [
        asset.name || 'N/A',
        (asset.category || 'equipment').replace('_', ' ').toUpperCase(),
        asset.department || 'N/A',
        `$${(asset.purchasePrice || 0).toLocaleString()}`,
        asset.status || 'N/A'
      ];

      doc.fillColor('#000000')
         .fontSize(9)
         .font('Helvetica');
      
      assetData.forEach((data, dataIndex) => {
        doc.text(data, startX + 5, currentY, { width: columnWidths[dataIndex] - 10, align: 'left' });
        startX += columnWidths[dataIndex];
      });

      currentY += 20;
      
      // Check for page break
      if (currentY > 700) {
        doc.addPage();
        currentY = 50;
      }
    });
  }

  /**
   * Generate Facilities Report
   */
  async generateFacilitiesReport(doc, filters) {
    let currentY = 290;
    
    doc.fontSize(14)
       .text('FACILITIES REPORT', 50, currentY);
    
    currentY += 30;

    // Get real facilities data from API
    const facilitiesData = await this.fetchFacilitiesData(filters);
    
    if (facilitiesData.length === 0) {
      doc.fontSize(12)
         .text('No facilities data available for the selected criteria.', 50, currentY);
      return;
    }

    // Facilities summary
    const operationalCount = facilitiesData.filter(f => f.status === 'operational').length;
    const maintenanceCount = facilitiesData.filter(f => f.status === 'maintenance').length;
    
    doc.fontSize(12)
       .text(`Total Facilities: ${facilitiesData.length}`, 50, currentY)
       .text(`Operational: ${operationalCount}`, 50, currentY + 15)
       .text(`Under Maintenance: ${maintenanceCount}`, 50, currentY + 30);

    currentY += 60;

    // Facilities by type
    const types = [...new Set(facilitiesData.map(f => f.type))];
    types.forEach(type => {
      const typeCount = facilitiesData.filter(f => f.type === type).length;
      doc.text(`${type.replace('_', ' ').toUpperCase()}: ${typeCount}`, 50, currentY);
      currentY += 15;
    });
  }

  /**
   * Generate Stock Inventory Report with clean, professional layout
   */
  async generateStockReport(doc, filters) {
    let currentY = 250;
    
    // Clean section header
    doc.fillColor('#000000')
       .fontSize(16)
       .font('Helvetica-Bold')
       .text('STOCK INVENTORY REPORT', 50, currentY);
    
    // Add underline
    doc.strokeColor('#000000')
       .lineWidth(1)
       .moveTo(50, currentY + 5)
       .lineTo(250, currentY + 5)
       .stroke();
    
    currentY += 30;

    // Get stock data
    const stockData = await this.fetchStockData(filters);
    
    if (stockData.length === 0) {
      doc.fillColor('#666666')
         .fontSize(12)
         .font('Helvetica')
         .text('No stock data available for the selected criteria.', 50, currentY);
      return;
    }

    // Professional summary
    const totalQuantity = stockData.reduce((sum, item) => sum + (item.quantity || 0), 0);
    const totalValue = stockData.reduce((sum, item) => sum + ((item.quantity || 0) * (item.unitPrice || 0)), 0);
    
    // Summary box
    doc.strokeColor('#CCCCCC')
       .lineWidth(1)
       .rect(50, currentY, 495, 40)
       .stroke();
    
    doc.fillColor('#000000')
       .fontSize(11)
       .font('Helvetica-Bold')
       .text('SUMMARY', 60, currentY + 8)
       .font('Helvetica')
       .fontSize(10)
       .text(`Total Items: ${stockData.length}`, 60, currentY + 22)
       .text(`Total Quantity: ${totalQuantity.toLocaleString()}`, 200, currentY + 22)
       .text(`Total Value: $${totalValue.toLocaleString()}`, 350, currentY + 22);
    
    currentY += 60;

    // Professional table
    const headers = ['Item Name', 'SKU', 'Category', 'Quantity', 'Unit Price', 'Status'];
    const columnWidths = [120, 80, 80, 60, 80, 60];
    let startX = 50;

    // Table header with clean styling
    doc.fillColor('#F8F9FA')
       .rect(50, currentY, 495, 25)
       .fill();
    
    doc.strokeColor('#CCCCCC')
       .lineWidth(1)
       .rect(50, currentY, 495, 25)
       .stroke();

    doc.fillColor('#000000')
       .fontSize(10)
       .font('Helvetica-Bold');
    headers.forEach((header, index) => {
      doc.text(header, startX + 5, currentY + 8, { width: columnWidths[index] - 10, align: 'left' });
      startX += columnWidths[index];
    });

    currentY += 30;

    // Table rows with alternating colors
    stockData.forEach((item, index) => {
      // Alternate row background
      if (index % 2 === 0) {
        doc.fillColor('#FFFFFF')
           .rect(50, currentY, 495, 20)
           .fill();
      } else {
        doc.fillColor('#F8F9FA')
           .rect(50, currentY, 495, 20)
           .fill();
      }
      
      // Row border
      doc.strokeColor('#CCCCCC')
         .lineWidth(0.5)
         .rect(50, currentY, 495, 20)
         .stroke();

      startX = 50;
      const status = (item.quantity || 0) === 0 ? 'OUT' : 
                   (item.quantity || 0) < (item.minimumLevel || 10) ? 'LOW' : 'OK';
      
      const itemData = [
        item.name || 'N/A',
        item.sku || item.id,
        (item.category || 'General').replace('_', ' ').toUpperCase(),
        (item.quantity || 0).toString(),
        `$${(item.unitPrice || 0).toFixed(2)}`,
        status
      ];

      doc.fillColor('#000000')
         .fontSize(9)
         .font('Helvetica');
      
      itemData.forEach((data, dataIndex) => {
        doc.text(data, startX + 5, currentY + 6, { width: columnWidths[dataIndex] - 10, align: 'left' });
        startX += columnWidths[dataIndex];
      });

      currentY += 20;
      
      // Check for page break
      if (currentY > 700) {
        doc.addPage();
        currentY = 50;
      }
    });
  }

  /**
   * Generate Comprehensive Report (All Categories)
   */
  async generateComprehensiveReport(doc, filters) {
    await this.generateFleetReport(doc, filters);
    doc.addPage();
    await this.generateAssetsReport(doc, filters);
    doc.addPage();
    await this.generateFacilitiesReport(doc, filters);
    doc.addPage();
    await this.generateStockReport(doc, filters);
  }

  /**
   * Get report type title
   */
  getReportTypeTitle(type) {
    switch (type) {
      case 'fleet': return 'FLEET';
      case 'assets': return 'ASSETS';
      case 'facilities': return 'FACILITIES';
      case 'stock': return 'STOCK INVENTORY';
      case 'all': return 'COMPREHENSIVE';
      default: return 'GOVERNMENT';
    }
  }

  /**
   * Fetch fleet data (using mock data for now)
   */
  async fetchFleetData(filters) {
    // Mock fleet data - this should match the server's mock data
    const mockVehicles = [
      {
        id: 'VH001',
        plateNumber: 'LBR-001-GOV',
        make: 'Toyota',
        model: 'Hilux',
        year: 2023,
        color: 'White',
        vinNumber: '1HGBH41JXMN109186',
        vehicleType: 'truck',
        status: 'active',
        department: 'Ministry of Health',
        currentOperator: 'Dr. Sarah Johnson',
        gpsTracker: 'BW32001',
        fuelLevel: 75,
        mileage: 12500,
        lastLocation: 'Ministry of Health HQ',
        lastMaintenance: '2024-01-01',
        nextMaintenance: '2024-04-01',
        lastUpdate: new Date().toISOString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      },
      {
        id: 'VH002',
        plateNumber: 'LBR-002-GOV',
        make: 'Nissan',
        model: 'Patrol',
        year: 2022,
        color: 'Black',
        vinNumber: '2HGBH41JXMN109187',
        vehicleType: 'car',
        status: 'active',
        department: 'Ministry of Defense',
        currentOperator: 'General Robert Smith',
        gpsTracker: 'BW32002',
        fuelLevel: 45,
        mileage: 28500,
        lastLocation: 'Defense Ministry HQ',
        lastMaintenance: '2023-12-01',
        nextMaintenance: '2024-03-01',
        lastUpdate: new Date().toISOString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      },
      {
        id: 'VH003',
        plateNumber: 'LBR-003-GOV',
        make: 'Ford',
        model: 'Transit',
        year: 2021,
        color: 'Blue',
        vinNumber: '3HGBH41JXMN109188',
        vehicleType: 'van',
        status: 'maintenance',
        department: 'General Services Agency',
        currentOperator: 'John Doe',
        gpsTracker: 'BW32003',
        fuelLevel: 30,
        mileage: 45000,
        lastLocation: 'GSA Motor Pool',
        lastMaintenance: '2024-01-15',
        nextMaintenance: '2024-02-15',
        lastUpdate: new Date().toISOString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      },
      {
        id: 'VH004',
        plateNumber: 'LBR-004-GOV',
        make: 'Toyota',
        model: 'Corolla',
        year: 2023,
        color: 'Silver',
        vinNumber: '4HGBH41JXMN109189',
        vehicleType: 'car',
        status: 'active',
        department: 'Ministry of Finance',
        currentOperator: 'Mary Williams',
        gpsTracker: 'BW32004',
        fuelLevel: 80,
        mileage: 8500,
        lastLocation: 'Finance Ministry',
        lastMaintenance: '2024-01-10',
        nextMaintenance: '2024-04-10',
        lastUpdate: new Date().toISOString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      },
      {
        id: 'VH005',
        plateNumber: 'LBR-005-GOV',
        make: 'Isuzu',
        model: 'D-Max',
        year: 2020,
        color: 'Red',
        vinNumber: '5HGBH41JXMN109190',
        vehicleType: 'truck',
        status: 'inactive',
        department: 'Ministry of Public Works',
        currentOperator: 'James Brown',
        gpsTracker: 'BW32005',
        fuelLevel: 0,
        mileage: 65000,
        lastLocation: 'Public Works Depot',
        lastMaintenance: '2023-11-01',
        nextMaintenance: '2024-02-01',
        lastUpdate: new Date().toISOString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
    ];

    let vehicles = mockVehicles;
    
    // Filter by MAC if specified (and not "All Departments")
    if (filters.macName && filters.macName !== 'All Departments') {
      vehicles = vehicles.filter(v => v.department === filters.macName);
    }
    
    // Filter by facility if specified
    if (filters.facilityName && filters.facilityName !== 'All Facilities') {
      vehicles = vehicles.filter(v => v.facilityName === filters.facilityName);
    }
        
        return vehicles;
  }

  /**
   * Fetch real assets data from API  
   */
  async fetchAssetsData(filters) {
    try {
      const fetch = require('node-fetch');
      const response = await fetch('http://localhost:5000/api/equipment');
      const result = await response.json();
      
      if (result.success && result.equipment) {
        let equipment = result.equipment;
        
        // Filter by MAC if specified
        if (filters.macName) {
          equipment = equipment.filter(e => e.department === filters.macName);
        }
        
        return equipment;
      }
      return [];
    } catch (error) {
      console.error('Error fetching assets data:', error);
      return [];
    }
  }

  /**
   * Fetch real facilities data from API
   */
  async fetchFacilitiesData(filters) {
    try {
      const fetch = require('node-fetch');
      const response = await fetch('http://localhost:5000/api/facilities');
      const result = await response.json();
      
      if (result.success && result.facilities) {
        let facilities = result.facilities;
        
        // Filter by MAC if specified
        if (filters.macName) {
          facilities = facilities.filter(f => f.department === filters.macName);
        }
        
        return facilities;
      }
      return [];
    } catch (error) {
      console.error('Error fetching facilities data:', error);
      return [];
    }
  }

  /**
   * Fetch stock data (using mock data for now)
   */
  async fetchStockData(filters) {
    // Mock stock data
    const mockStock = [
      {
        id: 'STK001',
        name: 'Office Paper A4',
        sku: 'PAPER-A4-001',
        category: 'office_supplies',
        quantity: 150,
        unit: 'reams',
        unitPrice: 8.50,
        minimumLevel: 20,
        location: 'GSA Central Warehouse',
        department: 'General Services Agency',
        supplier: 'Liberia Office Supplies Ltd',
        lastRestocked: '2024-01-15',
        status: 'in_stock'
      },
      {
        id: 'STK002',
        name: 'Blue Ink Cartridge',
        sku: 'INK-BLUE-002',
        category: 'office_supplies',
        quantity: 5,
        unit: 'cartridges',
        unitPrice: 25.00,
        minimumLevel: 10,
        location: 'IT Department',
        department: 'IT Department',
        supplier: 'Tech Solutions Inc',
        lastRestocked: '2024-01-10',
        status: 'low_stock'
      },
      {
        id: 'STK003',
        name: 'Cleaning Supplies Kit',
        sku: 'CLEAN-003',
        category: 'maintenance',
        quantity: 0,
        unit: 'kits',
        unitPrice: 45.00,
        minimumLevel: 5,
        location: 'Maintenance Department',
        department: 'General Services Agency',
        supplier: 'CleanPro Liberia',
        lastRestocked: '2023-12-20',
        status: 'out_of_stock'
      },
      {
        id: 'STK004',
        name: 'First Aid Kit',
        sku: 'MED-004',
        category: 'medical_supplies',
        quantity: 25,
        unit: 'kits',
        unitPrice: 35.00,
        minimumLevel: 15,
        location: 'Health Ministry',
        department: 'Ministry of Health',
        supplier: 'Medical Supplies Co',
        lastRestocked: '2024-01-20',
        status: 'in_stock'
      },
      {
        id: 'STK005',
        name: 'Vehicle Oil 5W-30',
        sku: 'OIL-005',
        category: 'vehicle_supplies',
        quantity: 8,
        unit: 'quarts',
        unitPrice: 12.50,
        minimumLevel: 20,
        location: 'Motor Pool',
        department: 'General Services Agency',
        supplier: 'Auto Parts Liberia',
        lastRestocked: '2024-01-12',
        status: 'low_stock'
      }
    ];

    let stock = mockStock;
    
    // Filter by MAC/department if specified (and not "All Departments")
    if (filters.macName && filters.macName !== 'All Departments') {
      stock = stock.filter(s => s.department === filters.macName || s.location === filters.macName);
    }
        
        return stock;
      }

  /**
   * Create statistics cards
   */
  async createStatsCards(doc, startY, stats) {
    const cardWidth = 120;
    const cardHeight = 80;
    const spacing = 20;
    let currentX = 50;
    let currentY = startY;

    stats.forEach((stat, index) => {
      // Card background
      doc.fillColor('#FFFFFF')
         .rect(currentX, currentY, cardWidth, cardHeight)
         .fill();
      
      // Card border
      doc.strokeColor(stat.color)
         .lineWidth(2)
         .rect(currentX, currentY, cardWidth, cardHeight)
         .stroke();

      // Icon
      doc.fillColor(stat.color)
         .fontSize(24)
         .text(stat.icon, currentX + 10, currentY + 10);

      // Value
      doc.fillColor('#1F2937')
         .fontSize(20)
         .font('Helvetica-Bold')
         .text(stat.value.toString(), currentX + 10, currentY + 35);

      // Title
      doc.fillColor('#6B7280')
         .fontSize(10)
         .font('Helvetica')
         .text(stat.title, currentX + 10, currentY + 55, { width: cardWidth - 20 });

      currentX += cardWidth + spacing;
      
      // Move to next row if needed
      if (currentX + cardWidth > 500) {
        currentX = 50;
        currentY += cardHeight + spacing;
      }
    });

    return currentY + cardHeight + 20;
  }

  /**
   * Create pie chart
   */
  async createPieChart({ labels, data, colors, title }) {
    try {
      const configuration = {
        type: 'pie',
        data: {
          labels: labels,
          datasets: [{
            data: data,
            backgroundColor: colors,
            borderWidth: 2,
            borderColor: '#FFFFFF'
          }]
        },
        options: {
          responsive: true,
          plugins: {
            title: {
              display: true,
              text: title,
              font: { size: 14, weight: 'bold' }
            },
            legend: {
              position: 'bottom',
              labels: {
                padding: 20,
                usePointStyle: true
              }
            }
          }
        }
      };

      return await this.chartJSNodeCanvas.renderToBuffer(configuration);
    } catch (error) {
      console.error('Error creating pie chart:', error);
      return null;
    }
  }

  /**
   * Create bar chart
   */
  async createBarChart({ labels, data, title, yAxisLabel }) {
    try {
      const configuration = {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: yAxisLabel || 'Value',
            data: data,
            backgroundColor: '#3B82F6',
            borderColor: '#1D4ED8',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          plugins: {
            title: {
              display: true,
              text: title,
              font: { size: 14, weight: 'bold' }
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: yAxisLabel || 'Value'
              }
            },
            x: {
              title: {
                display: true,
                text: 'Items'
              }
            }
          }
        }
      };

      return await this.chartJSNodeCanvas.renderToBuffer(configuration);
    } catch (error) {
      console.error('Error creating bar chart:', error);
      return null;
    }
  }

  /**
   * Create vehicle cards
   */
  async createVehicleCards(doc, startY, vehicles) {
    let currentY = startY;
    const cardWidth = 250;
    const cardHeight = 120;
    const spacing = 20;
    let currentX = 50;

    vehicles.forEach((vehicle, index) => {
      // Card background
      doc.fillColor('#FFFFFF')
         .rect(currentX, currentY, cardWidth, cardHeight)
         .fill();
      
      // Card border
      doc.strokeColor('#E5E7EB')
         .lineWidth(1)
         .rect(currentX, currentY, cardWidth, cardHeight)
         .stroke();

      // Status indicator
      const statusColor = vehicle.status === 'active' ? '#10B981' : 
                         vehicle.status === 'maintenance' ? '#F59E0B' : '#EF4444';
      
      doc.fillColor(statusColor)
         .rect(currentX, currentY, 5, cardHeight)
         .fill();

      // Vehicle details
      doc.fillColor('#1F2937')
         .fontSize(14)
         .font('Helvetica-Bold')
         .text(vehicle.plateNumber || 'N/A', currentX + 15, currentY + 10);

      doc.fillColor('#6B7280')
         .fontSize(10)
         .font('Helvetica')
         .text(`${vehicle.year || 'N/A'} ${vehicle.make || 'N/A'} ${vehicle.model || 'N/A'}`, currentX + 15, currentY + 30);

      // Department
      doc.fillColor('#374151')
         .fontSize(9)
         .font('Helvetica')
         .text(`Department: ${vehicle.department || 'N/A'}`, currentX + 15, currentY + 50);

      // Mileage
      doc.fillColor('#374151')
         .fontSize(9)
         .font('Helvetica')
         .text(`Mileage: ${(vehicle.mileage || 0).toLocaleString()} km`, currentX + 15, currentY + 65);

      // Operator
      doc.fillColor('#374151')
         .fontSize(9)
         .font('Helvetica')
         .text(`Operator: ${vehicle.currentOperator || 'Unassigned'}`, currentX + 15, currentY + 80);

      // Status badge
      doc.fillColor(statusColor)
         .rect(currentX + cardWidth - 60, currentY + 10, 50, 20)
         .fill();
      
      doc.fillColor('#FFFFFF')
         .fontSize(8)
         .font('Helvetica-Bold')
         .text(vehicle.status?.toUpperCase() || 'N/A', currentX + cardWidth - 55, currentY + 18, { width: 40, align: 'center' });

      currentX += cardWidth + spacing;
      
      // Move to next row if needed
      if (currentX + cardWidth > 500) {
        currentX = 50;
        currentY += cardHeight + spacing;
      }

      // Check for page break
      if (currentY + cardHeight > 700) {
        doc.addPage();
        currentY = 50;
        currentX = 50;
      }
    });

    return currentY + cardHeight + 20;
  }

  /**
   * Create low stock alerts with clean styling
   */
  async createLowStockAlerts(doc, startY, lowStockItems) {
    let currentY = startY;
    
    doc.fillColor('#000000')
       .fontSize(16)
       .font('Helvetica-Bold')
       .text('LOW STOCK ALERTS', 50, currentY);
    
    currentY += 30;

    lowStockItems.slice(0, 5).forEach((item, index) => {
      // Alert card with clean styling
      doc.fillColor('#F8F9FA')
         .rect(50, currentY, 495, 35)
         .fill();
      
      doc.strokeColor('#CCCCCC')
         .lineWidth(1)
         .rect(50, currentY, 495, 35)
         .stroke();

      // Alert indicator (text-based)
      doc.fillColor('#000000')
         .fontSize(12)
         .font('Helvetica-Bold')
         .text('ALERT', 60, currentY + 8);

      // Item details
      doc.fillColor('#000000')
         .fontSize(11)
         .font('Helvetica-Bold')
         .text(item.name || 'N/A', 120, currentY + 8);

      doc.fillColor('#666666')
         .fontSize(9)
         .font('Helvetica')
         .text(`Current: ${item.quantity || 0} | Minimum: ${item.minimumLevel || 10}`, 120, currentY + 20)
         .text(`Location: ${item.location || 'N/A'}`, 300, currentY + 20);

      currentY += 45;
    });

    return currentY + 20;
  }

  /**
   * Create stock item cards
   */
  async createStockItemCards(doc, startY, stockItems) {
    let currentY = startY;
    const cardWidth = 240;
    const cardHeight = 100;
    const spacing = 20;
    let currentX = 50;

    stockItems.forEach((item, index) => {
      // Card background
      doc.fillColor('#FFFFFF')
         .rect(currentX, currentY, cardWidth, cardHeight)
         .fill();
      
      // Card border
      doc.strokeColor('#E5E7EB')
         .lineWidth(1)
         .rect(currentX, currentY, cardWidth, cardHeight)
         .stroke();

      // Status indicator
      const status = (item.quantity || 0) === 0 ? 'OUT' : 
                   (item.quantity || 0) < (item.minimumLevel || 10) ? 'LOW' : 'OK';
      const statusColor = status === 'OK' ? '#10B981' : 
                         status === 'LOW' ? '#F59E0B' : '#EF4444';
      
      doc.fillColor(statusColor)
         .rect(currentX, currentY, 5, cardHeight)
         .fill();

      // Item details
      doc.fillColor('#1F2937')
         .fontSize(12)
         .font('Helvetica-Bold')
         .text(item.name || 'N/A', currentX + 15, currentY + 10, { width: cardWidth - 30 });

      doc.fillColor('#6B7280')
         .fontSize(9)
         .font('Helvetica')
         .text(`SKU: ${item.sku || item.id}`, currentX + 15, currentY + 25);

      // Quantity and value
      doc.fillColor('#374151')
         .fontSize(10)
         .font('Helvetica')
         .text(`Qty: ${(item.quantity || 0).toLocaleString()} ${item.unit || 'pcs'}`, currentX + 15, currentY + 40)
         .text(`Value: $${((item.quantity || 0) * (item.unitPrice || 0)).toLocaleString()}`, currentX + 15, currentY + 55);

      // Category
      doc.fillColor('#6B7280')
         .fontSize(8)
         .font('Helvetica')
         .text((item.category || 'General').replace('_', ' ').toUpperCase(), currentX + 15, currentY + 75);

      // Status badge
      doc.fillColor(statusColor)
         .rect(currentX + cardWidth - 50, currentY + 10, 40, 20)
         .fill();
      
      doc.fillColor('#FFFFFF')
         .fontSize(8)
         .font('Helvetica-Bold')
         .text(status, currentX + cardWidth - 45, currentY + 18, { width: 30, align: 'center' });

      currentX += cardWidth + spacing;
      
      // Move to next row if needed
      if (currentX + cardWidth > 500) {
        currentX = 50;
        currentY += cardHeight + spacing;
      }

      // Check for page break
      if (currentY + cardHeight > 700) {
        doc.addPage();
        currentY = 50;
        currentX = 50;
      }
    });

    return currentY + cardHeight + 20;
  }

  /**
   * Create status distribution section with clean styling
   */
  async createStatusDistributionSection(doc, startY, statusData) {
    let currentY = startY;
    
    doc.fillColor('#000000')
       .fontSize(16)
       .font('Helvetica-Bold')
       .text('VEHICLE STATUS DISTRIBUTION', 50, currentY);
    
    currentY += 30;

    // Create status cards with clean styling
    const statusCards = [
      { label: 'Active Vehicles', count: statusData.active, icon: 'ACT' },
      { label: 'In Maintenance', count: statusData.maintenance, icon: 'MNT' },
      { label: 'Inactive', count: statusData.inactive, icon: 'INA' }
    ];

    let currentX = 50;
    const cardWidth = 150;
    const cardHeight = 80;

    statusCards.forEach((card, index) => {
      // Card background
      doc.fillColor('#FFFFFF')
         .rect(currentX, currentY, cardWidth, cardHeight)
         .fill();
      
      // Card border
      doc.strokeColor('#CCCCCC')
         .lineWidth(1)
         .rect(currentX, currentY, cardWidth, cardHeight)
         .stroke();

      // Icon (using text instead of emoji)
      doc.fillColor('#000000')
         .fontSize(14)
         .font('Helvetica-Bold')
         .text(card.icon, currentX + 10, currentY + 10);

      // Count
      doc.fillColor('#000000')
         .fontSize(24)
         .font('Helvetica-Bold')
         .text(card.count.toString(), currentX + 10, currentY + 35);

      // Label
      doc.fillColor('#666666')
         .fontSize(10)
         .font('Helvetica')
         .text(card.label, currentX + 10, currentY + 60, { width: cardWidth - 20 });

      currentX += cardWidth + 20;
    });

    return currentY + cardHeight + 20;
  }

  /**
   * Create stock status section with clean styling
   */
  async createStockStatusSection(doc, startY, statusData) {
    let currentY = startY;
    
    doc.fillColor('#000000')
       .fontSize(16)
       .font('Helvetica-Bold')
       .text('STOCK STATUS DISTRIBUTION', 50, currentY);
    
    currentY += 30;

    // Create status cards with clean styling
    const statusCards = [
      { label: 'In Stock', count: statusData.inStock, icon: 'IN' },
      { label: 'Low Stock', count: statusData.lowStock, icon: 'LOW' },
      { label: 'Out of Stock', count: statusData.outOfStock, icon: 'OUT' }
    ];

    let currentX = 50;
    const cardWidth = 150;
    const cardHeight = 80;

    statusCards.forEach((card, index) => {
      // Card background
      doc.fillColor('#FFFFFF')
         .rect(currentX, currentY, cardWidth, cardHeight)
         .fill();
      
      // Card border
      doc.strokeColor('#CCCCCC')
         .lineWidth(1)
         .rect(currentX, currentY, cardWidth, cardHeight)
         .stroke();

      // Icon (using text instead of emoji)
      doc.fillColor('#000000')
         .fontSize(14)
         .font('Helvetica-Bold')
         .text(card.icon, currentX + 10, currentY + 10);

      // Count
      doc.fillColor('#000000')
         .fontSize(24)
         .font('Helvetica-Bold')
         .text(card.count.toString(), currentX + 10, currentY + 35);

      // Label
      doc.fillColor('#666666')
         .fontSize(10)
         .font('Helvetica')
         .text(card.label, currentX + 10, currentY + 60, { width: cardWidth - 20 });

      currentX += cardWidth + 20;
    });

    return currentY + cardHeight + 20;
  }

  /**
   * Create professional statistics grid with clean styling
   */
  async createProfessionalStatsGrid(doc, startY, stats) {
    let currentY = startY;
    const cardWidth = 140;
    const cardHeight = 100;
    const spacing = 20;
    let currentX = 50;

    stats.forEach((stat, index) => {
      // Card background
      doc.fillColor('#FFFFFF')
         .rect(currentX, currentY, cardWidth, cardHeight)
         .fill();
      
      // Card border
      doc.strokeColor('#CCCCCC')
         .lineWidth(1)
         .rect(currentX, currentY, cardWidth, cardHeight)
         .stroke();

      // Top accent bar (clean black)
      doc.fillColor('#000000')
         .rect(currentX, currentY, cardWidth, 3)
         .fill();

      // Icon (using text instead of emoji)
      doc.fillColor('#000000')
         .fontSize(16)
         .font('Helvetica-Bold')
         .text(stat.icon, currentX + 15, currentY + 15);

      // Value
      doc.fillColor('#000000')
         .fontSize(28)
         .font('Helvetica-Bold')
         .text(stat.value.toString(), currentX + 15, currentY + 45);

      // Title
      doc.fillColor('#666666')
         .fontSize(11)
         .font('Helvetica')
         .text(stat.title, currentX + 15, currentY + 75, { width: cardWidth - 30 });

      currentX += cardWidth + spacing;
      
      // Move to next row if needed
      if (currentX + cardWidth > 500) {
        currentX = 50;
        currentY += cardHeight + spacing;
      }
    });

    return currentY + cardHeight + 20;
  }

  /**
   * Create professional fleet table
   */
  async createProfessionalFleetTable(doc, startY, fleetData) {
    let currentY = startY;
    
    // Table header
    doc.fillColor('#F8FAFC')
       .rect(50, currentY, 495, 35)
       .fill();
    
    doc.strokeColor('#E2E8F0')
       .lineWidth(1)
       .rect(50, currentY, 495, 35)
       .stroke();

    // Header text
    const headers = ['Vehicle ID', 'Model', 'Department', 'Mileage', 'Operator', 'Status'];
    const columnWidths = [100, 120, 100, 80, 100, 80];
    let startX = 50;

    doc.fillColor('#374151')
       .fontSize(11)
       .font('Helvetica-Bold');
    
    headers.forEach((header, index) => {
      doc.text(header, startX + 10, currentY + 12, { width: columnWidths[index] - 20, align: 'left' });
      startX += columnWidths[index];
    });

    currentY += 40;

    // Table rows
    fleetData.forEach((vehicle, index) => {
      // Alternate row colors
      if (index % 2 === 0) {
        doc.fillColor('#FFFFFF')
           .rect(50, currentY, 495, 30)
           .fill();
      } else {
        doc.fillColor('#F8FAFC')
           .rect(50, currentY, 495, 30)
           .fill();
      }

      // Row border
      doc.strokeColor('#E2E8F0')
         .lineWidth(0.5)
         .rect(50, currentY, 495, 30)
         .stroke();

      startX = 50;
      const vehicleData = [
        vehicle.plateNumber || 'N/A',
        `${vehicle.year || 'N/A'} ${vehicle.make || 'N/A'} ${vehicle.model || 'N/A'}`,
        vehicle.department || 'N/A',
        `${(vehicle.mileage || 0).toLocaleString()} km`,
        vehicle.currentOperator || 'Unassigned',
        vehicle.status || 'N/A'
      ];

      doc.fillColor('#1F2937')
         .fontSize(10)
         .font('Helvetica');
      
      vehicleData.forEach((data, dataIndex) => {
        doc.text(data, startX + 10, currentY + 8, { width: columnWidths[dataIndex] - 20, align: 'left' });
        startX += columnWidths[dataIndex];
      });

      currentY += 30;
      
      // Check for page break
      if (currentY > 700) {
        doc.addPage();
        currentY = 50;
      }
    });

    return currentY + 20;
  }

  /**
   * Create professional stock table
   */
  async createProfessionalStockTable(doc, startY, stockData) {
    let currentY = startY;
    
    // Table header
    doc.fillColor('#F8FAFC')
       .rect(50, currentY, 495, 35)
       .fill();
    
    doc.strokeColor('#E2E8F0')
       .lineWidth(1)
       .rect(50, currentY, 495, 35)
       .stroke();

    // Header text
    const headers = ['Category', 'Item Name', 'SKU', 'Quantity', 'Value', 'Status'];
    const columnWidths = [100, 150, 80, 80, 80, 80];
    let startX = 50;

    doc.fillColor('#374151')
       .fontSize(11)
       .font('Helvetica-Bold');
    
    headers.forEach((header, index) => {
      doc.text(header, startX + 10, currentY + 12, { width: columnWidths[index] - 20, align: 'left' });
      startX += columnWidths[index];
    });

    currentY += 40;

    // Table rows
    stockData.forEach((item, index) => {
      // Alternate row colors
      if (index % 2 === 0) {
        doc.fillColor('#FFFFFF')
           .rect(50, currentY, 495, 30)
           .fill();
      } else {
        doc.fillColor('#F8FAFC')
           .rect(50, currentY, 495, 30)
           .fill();
      }

      // Row border
      doc.strokeColor('#E2E8F0')
         .lineWidth(0.5)
         .rect(50, currentY, 495, 30)
         .stroke();

      startX = 50;
      const status = (item.quantity || 0) === 0 ? 'OUT' : 
                   (item.quantity || 0) < (item.minimumLevel || 10) ? 'LOW' : 'OK';
      
      const itemData = [
        (item.category || 'General').replace('_', ' ').toUpperCase(),
        item.name || 'N/A',
        item.sku || item.id,
        `${(item.quantity || 0).toLocaleString()} ${item.unit || 'pcs'}`,
        `$${((item.quantity || 0) * (item.unitPrice || 0)).toLocaleString()}`,
        status
      ];

      doc.fillColor('#1F2937')
         .fontSize(10)
         .font('Helvetica');
      
      itemData.forEach((data, dataIndex) => {
        doc.text(data, startX + 10, currentY + 8, { width: columnWidths[dataIndex] - 20, align: 'left' });
        startX += columnWidths[dataIndex];
      });

      currentY += 30;
      
      // Check for page break
      if (currentY > 700) {
        doc.addPage();
        currentY = 50;
      }
    });

    return currentY + 20;
  }
}

module.exports = ReportGenerator;
