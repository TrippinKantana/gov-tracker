/**
 * Beautiful PDF Report Generator using pdfmake
 * Professional government asset tracking reports
 */

const PdfPrinter = require('pdfmake/src/printer');
const fs = require('fs');
const path = require('path');

class PdfMakeReportGenerator {
  constructor({ pool }) {
    this.pool = pool; // Database connection
    
    // Use built-in fonts
    this.fonts = {
      Roboto: {
        normal: 'Helvetica',
        bold: 'Helvetica-Bold',
        italics: 'Helvetica-Oblique',
        bolditalics: 'Helvetica-BoldOblique'
      }
    };
    this.printer = new PdfPrinter(this.fonts);
  }

  /**
   * Generate comprehensive report using pdfmake
   */
  async generateReport(filters) {
    const {
      macId,
      facilityId,
      reportType,
      reportPeriod,
      customStartDate,
      customEndDate,
      reportMode,
      includeInactive,
      macName,
      facilityName,
      dateRange,
      generatedBy
    } = filters;

    console.log('Generating beautiful report with pdfmake:', { reportType, reportPeriod, macName, facilityName });

    // Create document definition - Landscape orientation for better data presentation
    const docDefinition = {
      pageSize: 'A4',
      pageOrientation: 'landscape', // Horizontal layout for better table display
      pageMargins: [40, 80, 40, 80], // Increased margins for header/footer
      defaultStyle: {
        font: 'Roboto',
        fontSize: 10,
        lineHeight: 1.4
      },
      info: {
        title: `${this.getReportTypeTitle(reportType)} Report`,
        author: 'General Services Agency',
        subject: 'Government Asset Tracking Report',
        creator: 'GSA Asset Management System'
      },
      header: function(currentPage, pageCount) {
        return {
          text: `Page ${currentPage} of ${pageCount}`,
          alignment: 'right',
          margin: [0, 20, 40, 0],
          fontSize: 8,
          color: '#666666'
        };
      },
      content: []
    };

    // Add header
    this.addReportHeader(docDefinition, {
      title: `${this.getReportTypeTitle(reportType)} Report`,
      subtitle: `${macName}${facilityName ? ` - ${facilityName}` : ''}`,
      period: dateRange.label,
      generatedBy,
      generatedAt: new Date().toLocaleString()
    });

    // Add footer function
    docDefinition.footer = function(currentPage, pageCount, pageSize) {
      return [
        {
          text: 'CONFIDENTIAL GOVERNMENT DOCUMENT',
          alignment: 'center',
          fontSize: 10,
          bold: true,
          color: '#000000',
          margin: [0, 10, 0, 5]
        },
        {
          text: 'General Services Agency • Government of Liberia',
          alignment: 'center',
          fontSize: 9,
          color: '#333333',
          margin: [0, 0, 0, 5]
        },
        {
          text: `Generated by: ${generatedBy} • Report ID: RPT-${Date.now()}`,
          alignment: 'center',
          fontSize: 8,
          color: '#666666',
          margin: [0, 0, 0, 10]
        }
      ];
    };

    // Generate content based on report type
    switch (reportType) {
      case 'fleet':
        await this.generateFleetReport(docDefinition, filters);
        break;
      case 'assets':
        await this.generateAssetsReport(docDefinition, filters);
        break;
      case 'facilities':
        await this.generateFacilitiesReport(docDefinition, filters);
        break;
      case 'stock':
        await this.generateStockReport(docDefinition, filters);
        break;
      case 'all':
        await this.generateComprehensiveReport(docDefinition, filters);
        break;
      default:
        throw new Error('Invalid report type');
    }

    // Generate PDF
    const pdfDoc = this.printer.createPdfKitDocument(docDefinition);
    return pdfDoc;
  }

  /**
   * Add beautiful report header
   */
  addReportHeader(docDefinition, info) {
    docDefinition.content.push(
      // Liberian Seal and Government Header
      {
        columns: [
          {
            // Liberian Seal - Official Government Logo
            image: path.join(__dirname, '../../Assets/proxy-image.png'),
            width: 60,
            height: 60,
            margin: [0, 10, 0, 0]
          },
          {
            stack: [
              {
                text: 'REPUBLIC OF LIBERIA',
                style: 'governmentHeader',
                alignment: 'center'
              },
              {
                text: 'GENERAL SERVICES AGENCY',
                style: 'agencyHeader',
                alignment: 'center'
              },
              {
                text: 'Asset Tracking & Management System',
                style: 'systemHeader',
                alignment: 'center'
              }
            ],
            width: '*'
          }
        ],
        margin: [0, 0, 0, 10]
      },
      { text: '', margin: [0, 10] },
      
      // Report Title
      {
        text: info.title,
        style: 'reportTitle',
        alignment: 'center'
      },
      {
        text: info.subtitle,
        style: 'reportSubtitle',
        alignment: 'center'
      },
      { text: '', margin: [0, 20] },
      
      // Report Details Box
      {
        table: {
          widths: ['*', '*'],
          body: [
            [
              {
                text: 'REPORT DETAILS',
                style: 'detailsHeader'
              },
              {
                text: 'GSA OFFICIAL',
                style: 'detailsHeader',
                alignment: 'right'
              }
            ],
            [
              {
                text: [
                  { text: 'Report Period: ', bold: true },
                  info.period,
                  '\n',
                  { text: 'Generated By: ', bold: true },
                  info.generatedBy
                ],
                style: 'detailsText'
              },
              {
                text: [
                  { text: 'Generated On: ', bold: true },
                  info.generatedAt,
                  '\n',
                  { text: 'Report ID: ', bold: true },
                  `RPT-${Date.now()}`
                ],
                style: 'detailsText',
                alignment: 'right'
              }
            ]
          ]
        },
        layout: {
          hLineWidth: () => 1.2,
          vLineWidth: () => 1.2,
          hLineColor: () => '#D1D5DB',
          vLineColor: () => '#D1D5DB',
          paddingTop: function(i, node) { return 6; },
          paddingBottom: function(i, node) { return 6; },
          paddingLeft: function(i, node) { return 8; },
          paddingRight: function(i, node) { return 8; }
        },
        margin: [0, 0, 0, 20]
      },
      
      // Separator line - optimized for landscape
      {
        canvas: [
          {
            type: 'line',
            x1: 0, y1: 0,
            x2: 750, y2: 0, // Extended for landscape width
            lineWidth: 1,
            lineColor: '#CCCCCC'
          }
        ],
        margin: [0, 0, 0, 20]
      }
    );
  }

  /**
   * Generate beautiful Fleet Report
   */
  async generateFleetReport(docDefinition, filters) {
    // Get fleet data
    const fleetData = await this.fetchFleetData(filters);
    
    if (fleetData.length === 0) {
      docDefinition.content.push({
        text: 'No fleet data available for the selected criteria.',
        style: 'noDataText'
      });
      return;
    }

    // Calculate summary statistics
    const activeCount = fleetData.filter(v => v.status === 'active' || v.status === 'Active').length;
    const totalMileage = fleetData.reduce((sum, v) => sum + (v.mileage || 0), 0);

    docDefinition.content.push(
      // Section Header
      {
        text: 'FLEET INVENTORY REPORT',
        style: 'sectionHeader'
      },
      { text: '', margin: [0, 10] },
      
      // Summary Statistics
      {
        table: {
          widths: ['*', '*', '*'],
          body: [
            [
              {
                text: 'SUMMARY STATISTICS',
                style: 'summaryHeader',
                colSpan: 3
              },
              {},
              {}
            ],
            [
              {
                text: [
                  { text: 'Total Vehicles: ', bold: true },
                  fleetData.length.toString()
                ],
                style: 'summaryText'
              },
              {
                text: [
                  { text: 'Active Vehicles: ', bold: true },
                  activeCount.toString()
                ],
                style: 'summaryText'
              },
              {
                text: [
                  { text: 'Total Mileage: ', bold: true },
                  `${totalMileage.toLocaleString()} km`
                ],
                style: 'summaryText'
              }
            ]
          ]
        },
        layout: {
          hLineWidth: () => 1.2,
          vLineWidth: () => 1.2,
          hLineColor: () => '#D1D5DB',
          vLineColor: () => '#D1D5DB',
          paddingTop: function(i, node) { return 6; },
          paddingBottom: function(i, node) { return 6; },
          paddingLeft: function(i, node) { return 8; },
          paddingRight: function(i, node) { return 8; }
        },
        margin: [0, 0, 0, 20]
      },
      
      // Fleet Data Table - Optimized for landscape orientation
      {
        table: {
          headerRows: 1,
          widths: ['12%', '22%', '18%', '10%', '12%', '26%'], // Optimized for landscape
          dontBreakRows: true,
          body: [
            // Header row
            [
              { text: 'Plate #', style: 'tableHeader' },
              { text: 'Vehicle', style: 'tableHeader' },
              { text: 'Department', style: 'tableHeader' },
              { text: 'Status', style: 'tableHeader' },
              { text: 'Mileage', style: 'tableHeader' },
              { text: 'Operator', style: 'tableHeader' }
            ],
            // Data rows with text wrapping
            ...fleetData.map(vehicle => [
              { text: vehicle.plateNumber || 'N/A', style: 'tableCell' },
              { 
                text: `${vehicle.year || 'N/A'} ${vehicle.make || 'N/A'} ${vehicle.model || 'N/A'}`,
                style: 'tableCell'
              },
              { text: vehicle.department || 'N/A', style: 'tableCell' },
              { text: vehicle.status || 'N/A', style: 'tableCell' },
              { text: `${(vehicle.mileage || 0).toLocaleString()} km`, style: 'tableCell' },
              { text: vehicle.currentOperator || 'Unassigned', style: 'tableCell' }
            ])
          ]
        },
        layout: {
          hLineWidth: (i, node) => i === 0 || i === node.table.body.length ? 1.5 : 0.8,
          vLineWidth: () => 0.8,
          hLineColor: (i, node) => i === 0 ? '#2C3E50' : '#E5E7EB',
          vLineColor: () => '#E5E7EB',
          paddingTop: function(i, node) { return 6; },
          paddingBottom: function(i, node) { return 6; },
          paddingLeft: function(i, node) { return 8; },
          paddingRight: function(i, node) { return 8; }
        },
        margin: [0, 0, 0, 20]
      }
    );
  }

  /**
   * Generate beautiful Assets Report
   */
  async generateAssetsReport(docDefinition, filters) {
    // Get assets data
    const assetsData = await this.fetchAssetsData(filters);
    
    if (assetsData.length === 0) {
      docDefinition.content.push({
        text: 'No assets data available for the selected criteria.',
        style: 'noDataText'
      });
      return;
    }

    // Calculate summary statistics
    const equipmentCount = assetsData.filter(a => a.category !== 'furniture').length;
    const furnitureCount = assetsData.filter(a => a.category === 'furniture').length;
    const totalValue = assetsData.reduce((sum, a) => sum + (a.purchasePrice || 0), 0);

    docDefinition.content.push(
      // Section Header
      {
        text: 'ASSETS INVENTORY REPORT',
        style: 'sectionHeader'
      },
      { text: '', margin: [0, 10] },
      
      // Summary Statistics
      {
        table: {
          widths: ['*', '*', '*', '*'],
          body: [
            [
              {
                text: 'ASSETS SUMMARY',
                style: 'summaryHeader',
                colSpan: 4
              },
              {},
              {},
              {}
            ],
            [
              {
                text: [
                  { text: 'Equipment Items: ', bold: true },
                  equipmentCount.toString()
                ],
                style: 'summaryText'
              },
              {
                text: [
                  { text: 'Furniture Items: ', bold: true },
                  furnitureCount.toString()
                ],
                style: 'summaryText'
              },
              {
                text: [
                  { text: 'Total Assets: ', bold: true },
                  assetsData.length.toString()
                ],
                style: 'summaryText'
              },
              {
                text: [
                  { text: 'Total Value: ', bold: true },
                  `$${totalValue.toLocaleString()}`
                ],
                style: 'summaryText'
              }
            ]
          ]
        },
        layout: {
          hLineWidth: () => 1.2,
          vLineWidth: () => 1.2,
          hLineColor: () => '#D1D5DB',
          vLineColor: () => '#D1D5DB',
          paddingTop: function(i, node) { return 6; },
          paddingBottom: function(i, node) { return 6; },
          paddingLeft: function(i, node) { return 8; },
          paddingRight: function(i, node) { return 8; }
        },
        margin: [0, 0, 0, 20]
      },
      
      // Assets by Category
      {
        text: 'ASSETS BY CATEGORY',
        style: 'subsectionHeader'
      },
      { text: '', margin: [0, 5] },
      
      // Category breakdown
      ...this.generateCategoryBreakdown(assetsData),
      
      { text: '', margin: [0, 10] },
      
      // Top Valuable Assets Table
      {
        text: 'TOP VALUABLE ASSETS',
        style: 'subsectionHeader'
      },
      { text: '', margin: [0, 5] },
      
      {
        table: {
          headerRows: 1,
          widths: ['30%', '12%', '22%', '18%', '18%'], // Optimized for landscape
          dontBreakRows: true,
          body: [
            // Header row
            [
              { text: 'Asset Name', style: 'tableHeader' },
              { text: 'Category', style: 'tableHeader' },
              { text: 'Department', style: 'tableHeader' },
              { text: 'Value', style: 'tableHeader' },
              { text: 'Status', style: 'tableHeader' }
            ],
            // Data rows (top 10 by value) with text wrapping
            ...assetsData
              .sort((a, b) => (b.purchasePrice || 0) - (a.purchasePrice || 0))
              .slice(0, 10)
              .map(asset => [
                { text: asset.name || 'N/A', style: 'tableCell' },
                { text: (asset.category || 'equipment').replace('_', ' ').toUpperCase(), style: 'tableCell' },
                { text: asset.department || 'N/A', style: 'tableCell' },
                { text: `$${(asset.purchasePrice || 0).toLocaleString()}`, style: 'tableCell' },
                { text: asset.status || 'N/A', style: 'tableCell' }
              ])
          ]
        },
        layout: {
          hLineWidth: (i, node) => i === 0 || i === node.table.body.length ? 1.5 : 0.8,
          vLineWidth: () => 0.8,
          hLineColor: (i, node) => i === 0 ? '#2C3E50' : '#E5E7EB',
          vLineColor: () => '#E5E7EB',
          paddingTop: function(i, node) { return 6; },
          paddingBottom: function(i, node) { return 6; },
          paddingLeft: function(i, node) { return 8; },
          paddingRight: function(i, node) { return 8; }
        },
        margin: [0, 0, 0, 20]
      }
    );
  }

  /**
   * Generate category breakdown for assets
   */
  generateCategoryBreakdown(assetsData) {
    const categories = [...new Set(assetsData.map(a => a.category || 'equipment'))];
    
    return categories.map(category => {
      const categoryItems = assetsData.filter(a => (a.category || 'equipment') === category);
      const categoryValue = categoryItems.reduce((sum, item) => sum + (item.purchasePrice || 0), 0);
      
      return {
        table: {
          widths: ['*', 80, 100, 100],
          body: [
            [
              {
                text: category.toUpperCase().replace('_', ' '),
                style: 'categoryName'
              },
              {
                text: `${categoryItems.length} items`,
                style: 'categoryStats'
              },
              {
                text: `$${categoryValue.toLocaleString()}`,
                style: 'categoryStats'
              },
              {
                text: `$${Math.round(categoryValue / categoryItems.length)}`,
                style: 'categoryStats'
              }
            ]
          ]
        },
        layout: {
          hLineWidth: () => 0.5,
          vLineWidth: () => 0.5,
          hLineColor: () => '#CCCCCC',
          vLineColor: () => '#CCCCCC'
        },
        margin: [0, 0, 0, 5]
      };
    });
  }

  /**
   * Generate beautiful Stock Report
   */
  async generateStockReport(docDefinition, filters) {
    // Get stock data
    const stockData = await this.fetchStockData(filters);
    
    if (stockData.length === 0) {
      docDefinition.content.push({
        text: 'No stock data available for the selected criteria.',
        style: 'noDataText'
      });
      return;
    }

    // Calculate summary statistics
    const totalQuantity = stockData.reduce((sum, item) => sum + (item.quantity || 0), 0);
    const totalValue = stockData.reduce((sum, item) => sum + ((item.quantity || 0) * (item.unitPrice || 0)), 0);

    docDefinition.content.push(
      // Section Header
      {
        text: 'STOCK INVENTORY REPORT',
        style: 'sectionHeader'
      },
      { text: '', margin: [0, 10] },
      
      // Summary Statistics
      {
        table: {
          widths: ['*', '*', '*'],
          body: [
            [
              {
                text: 'INVENTORY SUMMARY',
                style: 'summaryHeader',
                colSpan: 3
              },
              {},
              {}
            ],
            [
              {
                text: [
                  { text: 'Total Items: ', bold: true },
                  stockData.length.toString()
                ],
                style: 'summaryText'
              },
              {
                text: [
                  { text: 'Total Quantity: ', bold: true },
                  totalQuantity.toLocaleString()
                ],
                style: 'summaryText'
              },
              {
                text: [
                  { text: 'Total Value: ', bold: true },
                  `$${totalValue.toLocaleString()}`
                ],
                style: 'summaryText'
              }
            ]
          ]
        },
        layout: {
          hLineWidth: () => 1.2,
          vLineWidth: () => 1.2,
          hLineColor: () => '#D1D5DB',
          vLineColor: () => '#D1D5DB',
          paddingTop: function(i, node) { return 6; },
          paddingBottom: function(i, node) { return 6; },
          paddingLeft: function(i, node) { return 8; },
          paddingRight: function(i, node) { return 8; }
        },
        margin: [0, 0, 0, 20]
      },
      
      // Stock Data Table - Optimized for landscape orientation
      {
        table: {
          headerRows: 1,
          widths: ['25%', '12%', '15%', '10%', '15%', '23%'], // Optimized for landscape
          dontBreakRows: true,
          body: [
            // Header row
            [
              { text: 'Item Name', style: 'tableHeader' },
              { text: 'SKU', style: 'tableHeader' },
              { text: 'Category', style: 'tableHeader' },
              { text: 'Quantity', style: 'tableHeader' },
              { text: 'Unit Price', style: 'tableHeader' },
              { text: 'Status', style: 'tableHeader' }
            ],
            // Data rows with text wrapping
            ...stockData.map(item => {
              const status = (item.quantity || 0) === 0 ? 'OUT' : 
                           (item.quantity || 0) < (item.minimumLevel || 10) ? 'LOW' : 'OK';
              
              return [
                { text: item.name || 'N/A', style: 'tableCell' },
                { text: item.sku || item.id, style: 'tableCell' },
                { text: (item.category || 'General').replace('_', ' ').toUpperCase(), style: 'tableCell' },
                { text: (item.quantity || 0).toString(), style: 'tableCell' },
                { text: `$${(item.unitPrice || 0).toFixed(2)}`, style: 'tableCell' },
                { text: status, style: 'tableCell' }
              ];
            })
          ]
        },
        layout: {
          hLineWidth: (i, node) => i === 0 || i === node.table.body.length ? 1.5 : 0.8,
          vLineWidth: () => 0.8,
          hLineColor: (i, node) => i === 0 ? '#2C3E50' : '#E5E7EB',
          vLineColor: () => '#E5E7EB',
          paddingTop: function(i, node) { return 6; },
          paddingBottom: function(i, node) { return 6; },
          paddingLeft: function(i, node) { return 8; },
          paddingRight: function(i, node) { return 8; }
        },
        margin: [0, 0, 0, 20]
      }
    );
  }

  /**
   * Generate Facilities Report
   */
  async generateFacilitiesReport(docDefinition, filters) {
    // Get facilities data
    const facilitiesData = await this.fetchFacilitiesData(filters);
    
    if (facilitiesData.length === 0) {
      docDefinition.content.push({
        text: 'No facilities data available for the selected criteria.',
        style: 'noDataText'
      });
      return;
    }

    const operationalCount = facilitiesData.filter(f => f.status === 'operational').length;
    const maintenanceCount = facilitiesData.filter(f => f.status === 'maintenance').length;

    docDefinition.content.push(
      {
        text: 'FACILITIES REPORT',
        style: 'sectionHeader'
      },
      { text: '', margin: [0, 10] },
      {
        text: [
          { text: 'Total Facilities: ', bold: true },
          facilitiesData.length.toString(),
          '\n',
          { text: 'Operational: ', bold: true },
          operationalCount.toString(),
          '\n',
          { text: 'Under Maintenance: ', bold: true },
          maintenanceCount.toString()
        ],
        style: 'summaryText'
      }
    );
  }

  /**
   * Generate Comprehensive Report (All Categories)
   */
  async generateComprehensiveReport(docDefinition, filters) {
    await this.generateFleetReport(docDefinition, filters);
    docDefinition.content.push({ text: '', pageBreak: 'before' });
    await this.generateAssetsReport(docDefinition, filters);
    docDefinition.content.push({ text: '', pageBreak: 'before' });
    await this.generateFacilitiesReport(docDefinition, filters);
    docDefinition.content.push({ text: '', pageBreak: 'before' });
    await this.generateStockReport(docDefinition, filters);
  }

  /**
   * Get report type title
   */
  getReportTypeTitle(type) {
    switch (type) {
      case 'fleet': return 'FLEET';
      case 'assets': return 'ASSETS';
      case 'facilities': return 'FACILITIES';
      case 'stock': return 'STOCK INVENTORY';
      case 'all': return 'COMPREHENSIVE';
      default: return 'GOVERNMENT';
    }
  }

  // Data fetching methods (same as original)
  async fetchFleetData(filters) {
    // Mock fleet data - same as original
    const mockVehicles = [
      {
        id: 'VH001',
        plateNumber: 'LBR-001-GOV',
        make: 'Toyota',
        model: 'Hilux',
        year: 2023,
        color: 'White',
        vinNumber: '1HGBH41JXMN109186',
        vehicleType: 'truck',
        status: 'active',
        department: 'Ministry of Health',
        currentOperator: 'Dr. Sarah Johnson',
        gpsTracker: 'BW32001',
        fuelLevel: 75,
        mileage: 12500,
        lastLocation: 'Ministry of Health HQ',
        lastMaintenance: '2024-01-01',
        nextMaintenance: '2024-04-01',
        lastUpdate: new Date().toISOString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      },
      {
        id: 'VH002',
        plateNumber: 'LBR-002-GOV',
        make: 'Nissan',
        model: 'Patrol',
        year: 2022,
        color: 'Black',
        vinNumber: '2HGBH41JXMN109187',
        vehicleType: 'car',
        status: 'active',
        department: 'Ministry of Defense',
        currentOperator: 'General Robert Smith',
        gpsTracker: 'BW32002',
        fuelLevel: 45,
        mileage: 28500,
        lastLocation: 'Defense Ministry HQ',
        lastMaintenance: '2023-12-01',
        nextMaintenance: '2024-03-01',
        lastUpdate: new Date().toISOString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
    ];

    let vehicles = mockVehicles;
    
    if (filters.macName && filters.macName !== 'All Departments') {
      vehicles = vehicles.filter(v => v.department === filters.macName);
    }
    
    if (filters.facilityName && filters.facilityName !== 'All Facilities') {
      vehicles = vehicles.filter(v => v.facilityName === filters.facilityName);
    }
        
    return vehicles;
  }

  async fetchAssetsData(filters) {
    try {
      // For now, return mock data to avoid circular dependency issues
      // In production, you would fetch from your database directly
      const mockAssets = [
        {
          id: 'EQ001',
          name: 'Dell OptiPlex 7090',
          category: 'computer',
          department: 'Ministry of Health',
          purchasePrice: 1200,
          status: 'active'
        },
        {
          id: 'EQ002',
          name: 'HP LaserJet Pro',
          category: 'printer',
          department: 'Ministry of Health',
          purchasePrice: 300,
          status: 'active'
        }
      ];
      
      let equipment = mockAssets;
      
      if (filters.macName && filters.macName !== 'All Departments') {
        equipment = equipment.filter(e => e.department === filters.macName);
      }
      
      return equipment;
    } catch (error) {
      console.error('Error fetching assets data:', error);
      return [];
    }
  }

  async fetchFacilitiesData(filters) {
    try {
      // For now, return mock data to avoid circular dependency issues
      const mockFacilities = [
        {
          id: 'FAC001',
          name: 'Central Hospital',
          department: 'Ministry of Health',
          status: 'operational',
          location: 'Monrovia'
        },
        {
          id: 'FAC002',
          name: 'Government Office Building',
          department: 'Ministry of Health',
          status: 'operational',
          location: 'Monrovia'
        }
      ];
      
      let facilities = mockFacilities;
      
      if (filters.macName && filters.macName !== 'All Departments') {
        facilities = facilities.filter(f => f.department === filters.macName);
      }
      
      return facilities;
    } catch (error) {
      console.error('Error fetching facilities data:', error);
      return [];
    }
  }

  async fetchStockData(filters) {
    // Mock stock data - same as original
    const mockStock = [
      {
        id: 'STK001',
        name: 'Office Paper A4',
        sku: 'PAPER-A4-001',
        category: 'office_supplies',
        quantity: 150,
        unit: 'reams',
        unitPrice: 8.50,
        minimumLevel: 20,
        location: 'GSA Central Warehouse',
        department: 'General Services Agency',
        supplier: 'Liberia Office Supplies Ltd',
        lastRestocked: '2024-01-15',
        status: 'in_stock'
      },
      {
        id: 'STK002',
        name: 'Blue Ink Cartridge',
        sku: 'INK-BLUE-002',
        category: 'office_supplies',
        quantity: 5,
        unit: 'cartridges',
        unitPrice: 25.00,
        minimumLevel: 10,
        location: 'IT Department',
        department: 'IT Department',
        supplier: 'Tech Solutions Inc',
        lastRestocked: '2024-01-10',
        status: 'low_stock'
      }
    ];

    let stock = mockStock;
    
    if (filters.macName && filters.macName !== 'All Departments') {
      stock = stock.filter(s => s.department === filters.macName || s.location === filters.macName);
    }
        
    return stock;
  }
}

// Define styles for pdfmake
const styles = {
  sealStyle: {
    fontSize: 48,
    alignment: 'center',
    margin: [0, 10, 0, 0]
  },
  governmentHeader: {
    fontSize: 20,
    bold: true,
    color: '#000000',
    margin: [0, 0, 0, 5]
  },
  agencyHeader: {
    fontSize: 16,
    bold: true,
    color: '#000000',
    margin: [0, 0, 0, 5]
  },
  systemHeader: {
    fontSize: 12,
    color: '#666666',
    margin: [0, 0, 0, 10]
  },
  reportTitle: {
    fontSize: 18,
    bold: true,
    color: '#000000',
    margin: [0, 0, 0, 5]
  },
  reportSubtitle: {
    fontSize: 14,
    color: '#333333',
    margin: [0, 0, 0, 20]
  },
  detailsHeader: {
    fontSize: 11,
    bold: true,
    color: '#000000'
  },
  detailsText: {
    fontSize: 10,
    color: '#333333'
  },
  sectionHeader: {
    fontSize: 16,
    bold: true,
    color: '#000000',
    margin: [0, 0, 0, 10]
  },
  subsectionHeader: {
    fontSize: 14,
    bold: true,
    color: '#000000',
    margin: [0, 0, 0, 5]
  },
  summaryHeader: {
    fontSize: 11,
    bold: true,
    color: '#000000',
    fillColor: '#F8F9FA'
  },
  summaryText: {
    fontSize: 10,
    color: '#333333'
  },
  tableHeader: {
    fontSize: 10,
    bold: true,
    color: '#000000',
    fillColor: '#F0F4F8', // Slightly stronger background for headers
    alignment: 'left',
    margin: [0, 0, 0, 0], // Remove margin since we're using layout padding
    lineHeight: 1.5 // Better line height for headers
  },
  tableCell: {
    fontSize: 9,
    color: '#333333',
    alignment: 'left',
    margin: [0, 0, 0, 0], // Remove margin since we're using layout padding
    lineHeight: 1.4 // Improved line height for readability
  },
  categoryName: {
    fontSize: 10,
    bold: true,
    color: '#000000'
  },
  categoryStats: {
    fontSize: 10,
    color: '#333333',
    alignment: 'right'
  },
  noDataText: {
    fontSize: 12,
    color: '#666666',
    italics: true,
    alignment: 'center',
    margin: [0, 20]
  }
};

module.exports = PdfMakeReportGenerator;
